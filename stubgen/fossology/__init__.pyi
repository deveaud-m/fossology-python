from fossology.exceptions import AuthenticationError as AuthenticationError, AuthorizationError as AuthorizationError, FossologyApiError as FossologyApiError, FossologyUnsupported as FossologyUnsupported
from fossology.folders import Folders as Folders
from fossology.groups import Groups as Groups
from fossology.jobs import Jobs as Jobs
from fossology.license import LicenseEndpoint as LicenseEndpoint
from fossology.obj import Agents as Agents, File as File, SearchTypes as SearchTypes, TokenScope as TokenScope, Upload as Upload, User as User, get_options as get_options
from fossology.report import Report as Report
from fossology.uploads import Uploads as Uploads
from typing import Any, Dict, List

logger: Any

def versiontuple(v): ...
def search_headers(searchType: SearchTypes = ..., upload: Upload = ..., filename: str = ..., tag: str = ..., filesizemin: int = ..., filesizemax: int = ..., license: str = ..., copyright: str = ..., group: str = ...) -> Dict: ...
def fossology_token(url, username, password, token_name, token_scope=..., token_expire: Any | None = ...): ...

class Fossology(Folders, Groups, LicenseEndpoint, Uploads, Jobs, Report):
    host: Any
    token: Any
    users: Any
    folders: Any
    api: Any
    session: Any
    version: Any
    user: Any
    name: Any
    rootFolder: Any
    def __init__(self, url, token, name: Any | None = ...) -> None: ...
    def get_self(self, name: Any | None = ...): ...
    def close(self) -> None: ...
    def get_version(self): ...
    def detail_user(self, user_id): ...
    def list_users(self): ...
    def delete_user(self, user) -> None: ...
    def search(self, searchType: SearchTypes = ..., upload: Upload = ..., filename: str = ..., tag: str = ..., filesizemin: int = ..., filesizemax: int = ..., license: str = ..., copyright: str = ..., group: str = ...): ...
    def filesearch(self, filelist: List = ..., group: str = ...): ...
